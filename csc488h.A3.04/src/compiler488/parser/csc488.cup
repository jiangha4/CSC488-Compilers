// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.
import compiler488.ast.*;
import compiler488.ast.decl.*;
import compiler488.ast.expn.*;
import compiler488.ast.stmt.*;
import compiler488.ast.type.*;


/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components.
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;

    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";

        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
	     */

            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
            else
               st += " at end of input " ;
           }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}

    /** Override the report_fatal_error method to use the report_error method. */
    /** @throws SyntaxErrorException						*/
    public void report_fatal_error (String message, Object info) throws SyntaxErrorException
	{
        report_error (message, info);
        throw new SyntaxErrorException (lastError);
	}

:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2009/2010

// Terminals returned by the scanner with no value attached.
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal 	BOOLEAN,INTEGER,FUNCTION,PROCEDURE	;
terminal	BEGIN,	DO,	ELSE,	END,	EXIT	;
terminal	IF,	RETURN,	LOOP,	PUT,	GET	;
terminal	THEN,	WHILE,	SKIP,	YIELDS, WHEN	;

// Special-character terminals, no value attached
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY	;
terminal	EQUAL,	GREATER, LESS,	COMMA,  DOT	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal Program program;
nonterminal Scope scope;

nonterminal ASTList<Stmt> declarationsAndStatements;
nonterminal Stmt statement;
nonterminal Declaration declaration;
nonterminal ProcedureCallStmt procedureCall;

nonterminal Expn expression;
nonterminal ASTList<Expn> arguments;

nonterminal Assignable variable;
nonterminal ASTList<DeclarationPart> variablenames;
nonterminal DeclarationPart variablename;
nonterminal Integer[] bound;
nonterminal Integer generalBound;
nonterminal Type type;
nonterminal ASTList<ScalarDecl> parameters;
nonterminal ASTList<Assignable> inputs;
nonterminal ASTList<Printable> outputs;
nonterminal Printable output;

nonterminal	parameter, conjunction, negation, compareExpn ;
nonterminal	arithExpn, term, factor, primary, constant ;

// Non-terminals that have a value.
// nonterminal type  nameList ;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;		// Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program ::= scope:s
			{: RESULT = new Program(s); :}
	;

scope ::= BEGIN declarationsAndStatements:d END
			{: RESULT = new Scope(d); :}
	|	BEGIN END
			{: RESULT = new Scope(); :}
	;

//  sequence of arbitrarily intermixed declarations and statements
declarationsAndStatements ::= statement:s
			{: RESULT = new ASTList(s); :}
	|	declaration:d
			{: RESULT = new ASTList(d); :}
	|	declarationsAndStatements:l statement:s
			{: RESULT = l.append(s); :}
	|	declarationsAndStatements:l declaration:d
			{: RESULT = l.append(d); :}
	;

statement ::= variable:v LESS EQUAL expression:e
			{: RESULT = new AssignStmt(v, e); :}
	|	IF expression:e THEN declarationsAndStatements:d END
			{: RESULT = new IfStmt(e, d); :}
	|	IF expression:e THEN declarationsAndStatements:d1 ELSE declarationsAndStatements:d2 END
			{: RESULT = new IfStmt(e, d1, d2); :}
	|	WHILE expression:e DO declarationsAndStatements:d END
			{: RESULT = new WhileDoStmt(e, d); :}
	|	LOOP declarationsAndStatements:d END
			{: RESULT = new LoopStmt(d); :}
	|	EXIT
			{: RESULT = new ExitStmt(); :}
	|	EXIT WHEN expression:e
			{: RESULT = new ExitStmt(e); :}
	|	RETURN
			{: RESULT = new ReturnStmt(); :}
	|	RETURN L_PAREN expression:e R_PAREN
			{: RESULT = new ReturnStmt(e); :}
	|	PUT outputs:o
			{: RESULT = new PutStmt(o); :}
	|	GET inputs:i
			{: RESULT = new GetStmt(i); :}
	|	procedureCall:c
			{: RESULT = c; :}
	|	scope:s
			{: RESULT = s; :}
	;

procedureCall ::= IDENT:i
			{: RESULT = new ProcedureCallStmt(i); :}
	|	IDENT:i L_PAREN arguments:a R_PAREN
			{: RESULT = new ProcedureCallStmt(i, a); :}
	;

declaration ::= type:t variablenames:v
			{: RESULT = new MultiDeclarations(t, v); :}
	|	type:t FUNCTION IDENT:i scope:s
			{: RESULT = new RoutineDecl(i, t, s); :}
	|	type:t FUNCTION IDENT:i L_PAREN parameters:p R_PAREN scope:s
			{: RESULT = new RoutineDecl(i, t, p, s); :}
	|	PROCEDURE IDENT:i scope:s
			{: RESULT = new RoutineDecl(i, s); :}
	|	PROCEDURE IDENT:i L_PAREN parameters:p R_PAREN scope:s
			{: RESULT = new RoutineDecl(i, p, s); :}
	;

variablenames ::= variablename:v
			{: RESULT = new ASTList<DeclarationPart>(v); :}
	|	variablenames:v1 COMMA variablename:v2
			{: RESULT = v1.append(v2); :}
	;

variablename ::= IDENT:i
			{: RESULT = new ScalarDeclPart(i); :}
	|	IDENT:i L_SQUARE bound:b R_SQUARE
			{: RESULT = new ArrayDeclPart(i, b); :}
	|	IDENT:i L_SQUARE bound:b1 COMMA bound:b2  R_SQUARE
			{: RESULT = new ArrayDeclPart(i, b1, b2); :}
	;

bound ::= INTCONST:i
			{: RESULT = new Integer[] { 0, i }; :}
	|	generalBound:b1 DOT DOT generalBound:b2
			{: RESULT = new Integer[] { b1, b2 }; :}
	;

generalBound ::= INTCONST:i
			{: RESULT = i; :}
	|	MINUS INTCONST:i
			{: RESULT = -i; :}
	;

type ::= INTEGER
			{: RESULT = new IntegerType(); :}
	|	BOOLEAN
			{: RESULT = new BooleanType(); :}
	;

outputs	::= output:o
			{: RESULT = new ASTList<Printable>(o); :}
	|	outputs:o1 COMMA output:o2
			{: RESULT = o1.append(o2); :}
	;

output ::= expression:e
			{: RESULT = e; :}
	|	TEXTCONST:t
			{: RESULT = new TextConstExpn(t); :}
	|	SKIP
			{: RESULT = new SkipConstExpn(); :}
	;

inputs		::=	variable		// list of variables being read into
		|	inputs COMMA variable
		;

arguments	::=	expression			// list of function/procedure arguments
		|	arguments COMMA expression
		;

parameters	::=	parameter			// list of function/procedure formal parameters
		|	parameters COMMA parameter
		;

parameter	::=	type IDENT ;			// declare one parameter

expression	::=	conjunction			// disjunctions, associate left-to-right
		|	expression OR conjunction
		;

conjunction	::=	negation			// conjunctions, associate left-to-right
		|	conjunction AND negation
		;

negation	::=	compareExpn 			// negations
		|	NOT negation
		;

compareExpn	::=	arithExpn			// comparisons, do not associate
		|	arithExpn EQUAL arithExpn
		| 	arithExpn NOT EQUAL arithExpn
		|	arithExpn LESS arithExpn
		|	arithExpn LESS EQUAL arithExpn
		|	arithExpn GREATER arithExpn
		|	arithExpn GREATER EQUAL arithExpn
		;

arithExpn	::=	term				// expressions, associate + , - left-to-right
		|	arithExpn  PLUS  term
		|	arithExpn  MINUS term
		;

term		::=	factor				// terms, associate * , /   left-to-right
		|	term TIMES factor
		|	term DIVIDE factor
		;

factor		::=	primary				// unary minus
		|	MINUS factor
		;

primary		::=	constant				// integer or boolean constant
		|	variable				// scalar, array variable or function call
		|	IDENT L_PAREN arguments R_PAREN 	// function call
		| 	L_PAREN  expression  R_PAREN		// parenthesized expression
		|	L_CURLEY declarationsAndStatements YIELDS expression R_CURLEY	// anon function
		;

constant	::=	INTCONST	// integer constant
		|	TRUE		// constant true
		|	FALSE		// constant false
		;

variable	::=	IDENT					// scalar variable or function call
		|	IDENT L_SQUARE expression R_SQUARE	// element of a 1-D  array
		|	IDENT L_SQUARE expression COMMA expression R_SQUARE	// element of a 2-D array
		;
