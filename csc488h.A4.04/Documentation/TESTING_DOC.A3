CSC488
Assignment 3
Group 4
Group Members:
	Haohan Jiang (g3jiangh)
	Chandeep Singh (g2singh)
	Maria Yancheva (c2yanche)
	Timo Vink (c4vinkti)


Testing
-------
How to run all tests
From the top-level directory (make sure "testrunner.py" is in the same directory), run:

> ./RUNALLTESTS.sh

Tests' folder structure:
All tests can be found under the tests/passing and tests/failing folders, 
separated into subfolders by semantic check group (following the headings in 
the semantic analysis handout), and then further divided into subfolders by 
semantic rule number.

Our testing strategy relies exclusively on test cases written in the CSC488
language (as opposed to JUnit or similar) as these tests are fast to write and
allowed us to change the internals of the compiler/semantic analysis without
having to update/rewrite all of our test cases. This allowed us to develop in
an agile manner.

Similar to the way we approached A2, we went over each of the semantic rules and
thought of as many unique scenarios (passing and failing) as we could, writing a
test case for each one.

We are reusing our python test runner from A2 (with minor modifications) to run
our compiler on each test case, and check if the test case passes or fails as
predicted. The test runner can distinguish between parsing, semantic, and
internal compiler exceptions to ensure there are no false positives or
negatives.


Test Overview
-------------
Below is an overview of the tests from each folder. They are split up in
'passing' and 'failing' folders. All of the test cases were written specifically 
for A3 (written from scratch and not copied over from A2).

tests/passing:
Tests contained in the passing directory are all syntactically and semantically valid.

tests/passing/declarations:
In this folder are tests for all declarations of functions, procedures, arrays,
and variables. Both functions and procedures have tests for declarations with
and without parameters and bodies. For arrays, both one dimensional and two
dimensional array declarations were tested along with different integer bounds.
Different types of variable declarations were tested such as multi and single
declarations of different types.

tests/passing/expressionTypeChecking:
As the name suggests, this folder contains tests for expression type checking. As
there are many semantic rules involved with type checking, this folder is further
divided into which semantic rules are being tested.

    S30: This directory contains tests to ensure that expressions in 'if', 'while' 
    and 'exit when' statements were boolean values. All operands of boolean 
	expressions ('&', '|', and '!') were also checked. A mixture of true and 
	false values were used along with ensuring that boolean variables were 
	type checked correctly.

    S31: This directory contains tests to ensure that operands of arithmetic 
	expressions, unary minus expressions and comparison expressions are of an 
	integer type. Array bounds, input variables, and output variables were also 
	tested to ensure they are integers.

    S32: This directory contains tests to ensure that left and right operands
    of equality expressions were the same type. We tested both boolean and integer values
    and variables with equal and not equal expressions.

    S34: This directory contains tests to ensure that variable and expression
    assignments were the same type. We tested assignment of both values and 
	variables to variables.

    S35: This directory contains tests to ensure that the expression type of a return
	statement matches the return type of the enclosing function. We tested both 
	boolean and integer functions returning values, scalar variables, and array elements.

    S36: This directory contains tests to ensure that the type of the arguments
    matches the type of the formal parameters of a function or procedure. We 
	have tests with strictly boolean parameters, strictly integer parameters,
    and mixed parameters.

    S37: This directory contains tests of a scalar variable being declared and then
	accessed. Both boolean and integer variables were tested.
    
	S38: This directory contains tests of an array being declared and then accessed.
	Both boolean and integer arrays were tested.
	
	S39: This directory contains tests of a parameter being declared in a function 
	declaration and then being accessed within the body of the function. Both 
	boolean and integer parameters were tested.

tests/passing/functionsProceduresAndArgs:
This directory contains tests for semantic rules 40-43. S44-45 were not needed in 
our implementation (since we used direct references to AST nodes).

    S40, S41: These directories contains tests for checking if an identifier
    has been declared as a function or procedure. It includes tests of function
    and procedure calls with and without parameters.

    S42, S43: These directories contains test for checking to ensure that functions
    and procedures are called with the correct number of arguments. S42 contains
    tests that test function and procedures declared without parameters and called
	without arguments, while S43 contains tests that test functions and procedures 
	declared with at least one parameter and called with the same number of arguments.

tests/passing/scope:
This directory contains tests for scoping. We tested empty scope, function and
procedure scopes with and without parameters, and nested ordinary scopes with new 
declarations and with re-declarations of variables from parent scopes.

tests/passing/statementChecking:
This directory contains tests for testing correctness conditions for statements.

    S50: This directory contains tests to ensure that an exit statement is
    inside of a loop. It contains tests with 'loop' and 'while' statements containing 
	an exit statement both directly in their body, nested within an if statement, nested  
	within a nested loop, or nested within a nested scope. Also tested are 
	conditional 'exit' statements.

    S51, S52: These two directories contain tests to ensure that a return is inside
    a function or a procedure. We tested declared and anonymous functions, and
    procedures, with return statements being either directly within the body of the 
	routine or in a nested if statement, loop or scope.

    S53: This directory contains tests to ensure that a function body contains
    at least one return statement. We tested declared functions with and without
    parameters for multiple and single return statements, both directly within 
	the body of the routine as well as nested inside an if statement, loop or 
	ordinary scope.

tests/failing
Tests contained in the failing directory are all syntactically valid, but are not
semantically valid.

tests/failing/declarations:

    S46: Tests for array declarations that had lower bounds greater than the 
	upper bounds.

tests/failing/expressionTypeChecking:

    S30: Tests that check for boolean expressions with integers or mixed operands, 
	and non-boolean operands in both 'loop', 'while' and 'exit when' expressions.

    S31: Tests that check for boolean operands in arithmetic expressions, 
	comparison expressions, and unary minus expressions. Also tested were boolean 
	variables in array bounds, input variables, and output variables.

    S32: Tests that check for equality expressions with different operand types 
	on the left and right hand side of '=' and '!='.

    S34: Tests that have faulty assignment statements such as assigning
    a boolean constant to an integer and vice versa.

    S35: Tests that have faulty return values where the return expression types did
    not match the function return type.

    S36: Tests that have faulty function and procedure calls where the
    argument types did not match the declared parameter types.

    S37-S38: Tests that attempt using scalar variables before they are 
	declared. We created tests that tested these in different
    statements such as in gets, exits, function calls, procedure calls, loops, returns,
    arrays, puts.

    S39: Tests that have undeclared parameters being used in different
    statements within the function or procedure body, such as in gets, exits, 
	function calls, procedure calls, loops, returns, arrays, puts.


tests/failing/functionsProceduresAndArgs:

    S40, S41: Tests that contain use of undeclared functions and procedures (or 
	ones declared at a later point in the program, after the call), 
	as well as calls to identifiers which have not been declared as a function 
	or a procedure. 

    S42, S43: Tests that contain function and procedure calls with an incorrect 
	number of arguments (not equal to the number of parameters in the declaration).

tests/failing/statementChecking:

    S50: Tests of invalid exit statements, such as exit statements that are not 
	located within a loop, or are located within a procedure/function nested inside
	a loop.
    
    S51-S52: Tests of invalid return statements, such as return
    statements outside of a function or procedure, or directly inside the statement part
	of an anon function (which is invalid as detailed in the revision posted by Prof. Wortman).

    S53: Tests of invalid functions (both with and without parameters) that do 
	not have returns in their bodies, including functions containing nested functions 
	with return statement in the nested function. 
