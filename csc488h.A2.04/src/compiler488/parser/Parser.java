
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 30 17:32:01 EST 2015
//----------------------------------------------------

package compiler488.parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 30 17:32:01 EST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\006\000\002\005\007\000\002\005\011\000" +
    "\002\005\007\000\002\005\005\000\002\005\005\000\002" +
    "\005\007\000\002\005\006\000\002\005\003\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\005\006" +
    "\000\002\005\003\000\002\005\006\000\002\005\011\000" +
    "\002\005\005\000\002\005\010\000\002\006\005\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\005\000\002\010\003\000\002\011\003" +
    "\000\002\022\003\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\024\003\000\002\020\005\000\002" +
    "\020\003\000\002\021\004\000\002\012\003\000\002\012" +
    "\006\000\002\012\007\000\002\027\005\000\002\027\005" +
    "\000\002\027\003\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\025\004\000\002\025\003\000\002" +
    "\013\003\000\002\014\003\000\002\015\003\000\002\017" +
    "\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\004\015\006\001\002\000\004\002\140\001" +
    "\002\000\004\002\000\001\002\000\032\011\023\012\026" +
    "\014\007\015\006\020\017\022\021\023\020\024\016\025" +
    "\022\026\030\030\014\053\012\001\002\000\004\053\131" +
    "\001\002\000\036\011\uffee\012\uffee\014\uffee\015\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\030\uffee\053\uffee\001\002\000\032\011\ufffc\012" +
    "\ufffc\014\ufffc\015\ufffc\020\ufffc\022\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\030\ufffc\053\ufffc\001\002\000\044\011" +
    "\uffca\012\uffca\014\uffca\015\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\030\uffca\034" +
    "\uffca\036\uffcd\044\uffce\053\uffca\001\002\000\004\013\113" +
    "\001\002\000\002\001\002\000\004\036\102\001\002\000" +
    "\030\011\023\012\026\014\007\015\006\022\021\023\020" +
    "\024\016\025\022\026\030\030\014\053\012\001\002\000" +
    "\040\002\uffff\011\uffff\012\uffff\014\uffff\015\uffff\017\uffff" +
    "\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026" +
    "\uffff\030\uffff\053\uffff\001\002\000\040\011\ufff3\012\ufff3" +
    "\014\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\034\072\053\ufff3" +
    "\001\002\000\002\001\002\000\006\031\054\055\056\001" +
    "\002\000\006\013\uffe0\053\uffe0\001\002\000\004\044\051" +
    "\001\002\000\042\011\uffd9\012\uffd9\014\uffd9\015\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\030\uffd9\044\uffd9\045\uffd9\053\uffd9\001\002\000" +
    "\006\013\uffe1\053\uffe1\001\002\000\032\011\023\012\026" +
    "\014\007\015\006\020\050\022\021\023\020\024\016\025" +
    "\022\026\030\030\014\053\012\001\002\000\004\053\044" +
    "\001\002\000\040\011\ufff0\012\ufff0\014\ufff0\015\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\030\ufff0\034\032\053\ufff0\001\002\000\002\001" +
    "\002\000\006\035\uffde\045\uffde\001\002\000\006\035\037" +
    "\045\036\001\002\000\006\035\uffdd\045\uffdd\001\002\000" +
    "\002\001\002\000\036\011\uffef\012\uffef\014\uffef\015\uffef" +
    "\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025" +
    "\uffef\026\uffef\030\uffef\053\uffef\001\002\000\006\035\uffdf" +
    "\045\uffdf\001\002\000\040\011\ufff1\012\ufff1\014\ufff1\015" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\030\ufff1\045\045\053\ufff1\001\002\000" +
    "\040\011\uffe3\012\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030" +
    "\uffe3\045\uffe3\053\uffe3\001\002\000\040\011\uffe2\012\uffe2" +
    "\014\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\045\uffe2\053\uffe2" +
    "\001\002\000\042\011\uffce\012\uffce\014\uffce\015\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\030\uffce\036\uffcd\045\uffce\053\uffce\001\002\000" +
    "\004\053\044\001\002\000\040\011\uffe4\012\uffe4\014\uffe4" +
    "\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\030\uffe4\045\uffe4\053\uffe4\001\002" +
    "\000\032\011\ufffd\012\ufffd\014\ufffd\015\ufffd\020\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\030\ufffd\053\ufffd" +
    "\001\002\000\040\002\ufffe\011\ufffe\012\ufffe\014\ufffe\015" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\030\ufffe\053\ufffe\001\002\000\004\042" +
    "\052\001\002\000\002\001\002\000\036\011\ufffb\012\ufffb" +
    "\014\ufffb\015\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\053\ufffb\001\002" +
    "\000\040\011\uffe5\012\uffe5\014\uffe5\015\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\030\uffe5\045\uffe5\053\uffe5\001\002\000\040\011\uffe8\012" +
    "\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\045\uffe8\053" +
    "\uffe8\001\002\000\040\011\uffe6\012\uffe6\014\uffe6\015\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\030\uffe6\045\uffe6\053\uffe6\001\002\000\040" +
    "\011\uffe7\012\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7" +
    "\045\uffe7\053\uffe7\001\002\000\040\011\ufff2\012\ufff2\014" +
    "\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\030\ufff2\045\061\053\ufff2\001" +
    "\002\000\006\031\054\055\056\001\002\000\040\011\uffe9" +
    "\012\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\045\uffe9" +
    "\053\uffe9\001\002\000\004\027\064\001\002\000\030\011" +
    "\023\012\026\014\007\015\006\022\021\023\020\024\016" +
    "\025\022\026\030\030\014\053\012\001\002\000\006\017" +
    "\066\020\067\001\002\000\030\011\023\012\026\014\007" +
    "\015\006\022\021\023\020\024\016\025\022\026\030\030" +
    "\014\053\012\001\002\000\036\011\ufffa\012\ufffa\014\ufffa" +
    "\015\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\030\ufffa\053\ufffa\001\002\000\004" +
    "\020\071\001\002\000\036\011\ufff9\012\ufff9\014\ufff9\015" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\030\ufff9\053\ufff9\001\002\000\002\001" +
    "\002\000\004\035\074\001\002\000\036\011\ufff4\012\ufff4" +
    "\014\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4\053\ufff4\001\002" +
    "\000\006\020\077\021\076\001\002\000\040\011\ufff6\012" +
    "\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\030\ufff6\033\100\053" +
    "\ufff6\001\002\000\036\011\ufff7\012\ufff7\014\ufff7\015\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\030\ufff7\053\ufff7\001\002\000\002\001\002" +
    "\000\036\011\ufff5\012\ufff5\014\ufff5\015\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\030\ufff5\053\ufff5\001\002\000\002\001\002\000\006\037" +
    "\104\045\105\001\002\000\042\011\uffd8\012\uffd8\014\uffd8" +
    "\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\030\uffd8\044\uffd8\045\uffd8\053\uffd8" +
    "\001\002\000\004\037\106\001\002\000\042\011\uffd7\012" +
    "\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\044\uffd7\045" +
    "\uffd7\053\uffd7\001\002\000\004\016\110\001\002\000\030" +
    "\011\023\012\026\014\007\015\006\022\021\023\020\024" +
    "\016\025\022\026\030\030\014\053\012\001\002\000\004" +
    "\020\112\001\002\000\036\011\ufff8\012\ufff8\014\ufff8\015" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\030\ufff8\053\ufff8\001\002\000\004\053" +
    "\114\001\002\000\006\015\uffcc\034\uffcc\001\002\000\006" +
    "\015\006\034\117\001\002\000\036\011\uffed\012\uffed\014" +
    "\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\030\uffed\053\uffed\001\002\000" +
    "\006\011\023\012\026\001\002\000\004\053\130\001\002" +
    "\000\006\035\124\045\123\001\002\000\006\035\uffdb\045" +
    "\uffdb\001\002\000\006\011\023\012\026\001\002\000\004" +
    "\015\006\001\002\000\036\011\uffec\012\uffec\014\uffec\015" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\030\uffec\053\uffec\001\002\000\006\035" +
    "\uffdc\045\uffdc\001\002\000\006\035\uffda\045\uffda\001\002" +
    "\000\006\035\uffcb\045\uffcb\001\002\000\006\015\uffca\034" +
    "\uffca\001\002\000\006\015\006\034\134\001\002\000\036" +
    "\011\uffeb\012\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb" +
    "\053\uffeb\001\002\000\006\011\023\012\026\001\002\000" +
    "\006\035\136\045\123\001\002\000\004\015\006\001\002" +
    "\000\036\011\uffea\012\uffea\014\uffea\015\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\030\uffea\053\uffea\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\007\004\026\005\010" +
    "\012\023\013\024\014\014\016\030\022\012\001\001\000" +
    "\004\016\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\106\001" +
    "\001\000\002\001\001\000\020\003\007\005\074\012\023" +
    "\013\024\014\014\016\030\022\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\062\001\001\000\010" +
    "\006\057\007\054\030\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\007\005\046\012\023\013\024\014\014\016\030\022" +
    "\012\001\001\000\014\010\040\011\041\012\042\013\024" +
    "\014\014\001\001\000\002\001\001\000\010\023\033\024" +
    "\032\030\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\037\030\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\045\012\042\013\024\014\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\061\030\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\007\005\064\012" +
    "\023\013\024\014\014\016\030\022\012\001\001\000\002" +
    "\001\001\000\020\003\007\005\067\012\023\013\024\014" +
    "\014\016\030\022\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\100\001\001\000" +
    "\002\001\001\000\004\030\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\007\005\110\012\023\013\024" +
    "\014\014\016\030\022\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\114\001\001\000\002\001\001" +
    "\000\004\003\115\001\001\000\002\001\001\000\010\020" +
    "\120\021\121\022\117\001\001\000\004\017\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\125\022" +
    "\117\001\001\000\004\003\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\132\001\001\000\002\001\001" +
    "\000\010\020\134\021\121\022\117\001\001\000\002\001" +
    "\001\000\004\003\136\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


    }



	String lastError;
	
    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";
   
        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
	     */
   
            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
            else
               st += " at end of input " ;
           }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}
   
    /** Override the report_fatal_error method to use the report_error method. */
    public void report_fatal_error (String message, Object info) 
	{
        report_error (message, info);
	}
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // procedurename ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedurename",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametername ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametername",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // functionname ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionname",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arrayname ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayname",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variablename ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablename",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // numericExpr ::= INTCONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numericExpr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // numericExpr ::= MINUS numericExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numericExpr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // multDivExpr ::= numericExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multDivExpr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // multDivExpr ::= multDivExpr DIVIDE multDivExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multDivExpr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // multDivExpr ::= multDivExpr TIMES multDivExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multDivExpr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // plusMinusExpr ::= multDivExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plusMinusExpr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // plusMinusExpr ::= plusMinusExpr MINUS plusMinusExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plusMinusExpr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // plusMinusExpr ::= plusMinusExpr PLUS plusMinusExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plusMinusExpr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable ::= arrayname L_SQUARE expression COMMA R_SQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable ::= arrayname L_SQUARE expression R_SQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable ::= variablename 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameter ::= type parametername 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parameters ::= parameters COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // argument ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arguments ::= argument 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arguments ::= arguments COMMA argument 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // input ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inputs ::= input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputs",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inputs ::= inputs COMMA input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputs",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // output ::= SKIP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // output ::= TEXTCONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // output ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // outputs ::= output 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outputs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // outputs ::= outputs COMMA output 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outputs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= PROCEDURE procedurename L_PAREN parameters R_PAREN scope 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= PROCEDURE procedurename scope 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= type FUNCTION functionname L_PAREN parameters R_PAREN scope 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= type FUNCTION functionname scope 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= scope 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= procedurename L_PAREN arguments R_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= procedurename 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= GET inputs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= PUT outputs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= RETURN L_PAREN expression R_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= LOOP statement EXIT WHEN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= LOOP statement EXIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= LOOP statement END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= WHILE expression DO statement END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= IF expression THEN statement ELSE statement END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= IF expression THEN statement END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= variable LESS EQUAL expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // scope ::= BEGIN statements END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // scope ::= BEGIN END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= scope 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

